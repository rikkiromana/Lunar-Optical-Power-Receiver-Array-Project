from PyLTSpice import SimRunner #simulation control module
from PyLTSpice import SpiceEditor #netlist modification module
from PyLTSpice import RawRead #to read simulation results
from matplotlib import pyplot as plt #display simulation results
from math import * #to have access to squareroot...

# select spice model
Asc_root_filename = 'Ampli_simu' #your asc filename without extension

SIMU = SimRunner(output_folder='./temp') # configure rundirectory
SIMU.create_netlist(Asc_root_filename +'.asc') # set the input file (file edited and saved through LTspice)
netlist = SpiceEditor(Asc_root_filename + '.net') #generate netlist from asc file with the same base name

# AC Closed loop
# simulation settings
netlist.add_instructions(
        "; Simulation settings",
        ".ac dec 30 10 1Meg"
)

# First simulation Run
SIMU.run(netlist)


# TRAN
# simulation settings
netlist.reset_netlist() # reset netlist for new simulation instructions
netlist.add_instructions(
        "; Simulation settings",
        ".tran 0 100u 0 1n"
)

#Second simulation Run
SIMU.run(netlist)


# NOISE
# simulation settings
netlist.reset_netlist() # reset netlist for new simulation instructions
netlist.add_instructions(
        "; Simulation settings",
        ".noise V(PREAMP_OUT) ISIGNAL dec 30 1 1Meg"
)

#Second simulation Run
SIMU.run(netlist)



#wait for simulations completions
#SIMU.wait_completion()
# Sim Statistics
netlist.reset_netlist() # reset netlist for new simulation instructions
print('Successful/Total Simulations: ' + str(SIMU.okSim) + '/' + str(SIMU.runno))

Plot_list = ['V(PREAMP_OUT)', 'V(AMP_IN)', 'V(AMP_OUT)','V(FEEDBACK)'] # signal to display list

# ________________________ Plot simulation results ___________________________________________
for raw, log in SIMU: # read each raw file generated by simulations runs
    print("Raw file: %s, Log file: %s" % (raw, log))
    raw_data = RawRead(raw)
    trace_names = raw_data.get_trace_names()

    print(trace_names)            # Get and print a list of all the traces
    print(raw_data.get_raw_property())           # Print all the properties found in the Header section
    Analysis_name = raw_data.get_raw_property('Plotname')

    index_line = 0
    index_col = 0
    nb_plot = len(Plot_list)
    col_nb = ceil(sqrt(nb_plot)) # superior round
    line_nb = ceil(nb_plot/col_nb)




    print('nb_plot: ' + str(nb_plot) + ' col: ' + str(col_nb) + ' line: ' + str(line_nb))
    if Analysis_name != 'Noise Spectral Density - (V/Hz½ or A/Hz½)':

        fig, axs = plt.subplots(line_nb, col_nb, squeeze=False, layout='constrained')
        # fig, axs = plt.subplots(2, 2)
        fig.suptitle(Analysis_name)

        for trace in Plot_list:

            Trace_name = trace
            Trace_to_plot = raw_data.get_trace(Trace_name)
            x_axis = raw_data.get_axis()
            steps = raw_data.get_steps()
            if trace[0] == 'V':
                y_label_txt = 'Voltage(V)'
            if trace[0] == 'I':
                y_label_txt = 'Current(I)'




            for step in range(len(steps)):
                if trace_names[0] == 'frequency':
                    axs[index_line,index_col].semilogx(x_axis, Trace_to_plot.get_wave(step), label=steps[step])
                else:
                    axs[index_line, index_col].plot(raw_data.get_trace('time').get_wave(step), Trace_to_plot.get_wave(step), label=steps[step])

            axs[index_line,index_col].set_title(Trace_name)
            axs[index_line,index_col].set(xlabel=trace_names[0], ylabel=y_label_txt)  # the first element of trace name list correspond to x axis type
            axs[index_line,index_col].grid(True, 'both') #both mean minor and major grid
            axs[index_line, index_col].legend(steps)  # both mean minor and major grid


            index_col = index_col +1
            if index_col >= col_nb:
                index_col = 0
                index_line = index_line +1

    else: #Noise simulation case
        Trace_to_plot = raw_data.get_trace('V(onoise)')
        x_axis = raw_data.get_axis()
        steps = raw_data.get_steps()

        for step in range(len(steps)):
            plt.plot(x_axis, Trace_to_plot.get_wave(step), label=steps[step])
            plt.grid(True, 'both')  # both mean minor and major grid
            plt.xscale('log')
            plt.legend(steps)
            plt.title('V(onoise)')
            plt.xlabel('Frequency')
            plt.ylabel('Noise density V/Hz½ or A/Hz½')

    plt.show()








enter = input("Press enter to delete created files")
if enter == '':
    SIMU.file_cleanup()

# Sim Statistics
print('Successful/Total Simulations: ' + str(SIMU.okSim) + '/' + str(SIMU.runno))